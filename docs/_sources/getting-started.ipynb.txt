{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quickstart"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The example below shows the basic usage of TSFuse."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data format"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The input of TSFuse is a dataset where each instance is a window that consists of multiple time series and a label."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Time series"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Time series are represented using a dictionary where each entry represents a univariate or multivariate time series. As an example, let's create a dictionary with two univariate time series:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-09T11:55:30.629106Z",
     "start_time": "2019-12-09T11:55:29.365104Z"
    }
   },
   "outputs": [],
   "source": [
    "from pandas import DataFrame\n",
    "from tsfuse.data import Collection\n",
    "\n",
    "X = {\n",
    "    \"x1\": Collection(DataFrame({\n",
    "        \"id\":   [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],\n",
    "        \"time\": [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2],\n",
    "        \"data\": [1, 2, 3, 1, 2, 3, 3, 2, 1, 3, 2, 1],\n",
    "    })),\n",
    "    \"x2\": Collection(DataFrame({\n",
    "        \"id\":   [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],\n",
    "        \"time\": [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2],\n",
    "        \"data\": [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n",
    "    })),\n",
    "}"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The two univariate time series are named `x1` and `x2` and each series is represented as a :class:`~tsfuse.data.Collection` object. Each ``Collection`` is initialized with a DataFrame that has three columns:\n",
    "\n",
    "- `id` which is the identifier of each instance, i.e., each window,\n",
    "- `time` which contains the time stamps,\n",
    "- `data` contains the time series data itself.\n",
    "\n",
    "For multivariate time series data, there can be multiple columns similar to the `data` column. For example, the data of a tri-axial accelerometer would have three columns `x`, `y`, `z` instead of `data` as it simultaneously measures the `x`, `y`, `z` acceleration."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Labels"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "There should be one target value for each window, so we create a `Series` where the index contains all unique `id` values of the time series data and the data consists of the labels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-09T11:55:30.634146Z",
     "start_time": "2019-12-09T11:55:30.631109Z"
    }
   },
   "outputs": [],
   "source": [
    "from pandas import Series\n",
    "y = Series(index=[0, 1, 2, 3], data=[0, 0, 1, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature construction"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To construct features, TSFuse provides a :meth:`~tsfuse.construct` function which takes time series data `X` and target data `y` as input, and returns a `DataFrame` where each column corresponds to a feature. In addition, this function can return a computation graph which contains all transformation steps required to compute the features for new data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-09T11:55:30.726204Z",
     "start_time": "2019-12-09T11:55:30.636771Z"
    }
   },
   "outputs": [],
   "source": [
    "from tsfuse import construct\n",
    "features, graph = construct(X, y, transformers=\"minimal\", return_graph=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The DataFrame with the constructed features looks like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-09T11:55:30.749748Z",
     "start_time": "2019-12-09T11:55:30.728227Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Max(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Mean(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Median(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Min(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Sum(Diff(Input(x1)), axis=time)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Max(Diff(Input(x1)), axis=time)  Mean(Diff(Input(x1)), axis=time)  \\\n",
       "0                              1.0                               1.0   \n",
       "1                              1.0                               1.0   \n",
       "2                             -1.0                              -1.0   \n",
       "3                             -1.0                              -1.0   \n",
       "\n",
       "   Median(Diff(Input(x1)), axis=time)  Min(Diff(Input(x1)), axis=time)  \\\n",
       "0                                 1.0                              1.0   \n",
       "1                                 1.0                              1.0   \n",
       "2                                -1.0                             -1.0   \n",
       "3                                -1.0                             -1.0   \n",
       "\n",
       "   Sum(Diff(Input(x1)), axis=time)  \n",
       "0                              2.0  \n",
       "1                              2.0  \n",
       "2                             -2.0  \n",
       "3                             -2.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "And this is the corresponding computation graph:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-09T11:55:30.797028Z",
     "start_time": "2019-12-09T11:55:30.751377Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"778pt\" height=\"188pt\"\n",
       " viewBox=\"0.00 0.00 778.25 188.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 184)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-184 774.2489,-184 774.2489,4 -4,4\"/>\n",
       "<!-- (&#39;Input&#39;, &#39;x1&#39;) -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>(&#39;Input&#39;, &#39;x1&#39;)</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"400.0827\" cy=\"-162\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"400.0827\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">x1</text>\n",
       "</g>\n",
       "<!-- (&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)) -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"400.0827\" cy=\"-90\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"400.0827\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Diff</text>\n",
       "</g>\n",
       "<!-- (&#39;Input&#39;, &#39;x1&#39;)&#45;&gt;(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)) -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>(&#39;Input&#39;, &#39;x1&#39;)&#45;&gt;(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M400.0827,-143.8314C400.0827,-136.131 400.0827,-126.9743 400.0827,-118.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"403.5828,-118.4132 400.0827,-108.4133 396.5828,-118.4133 403.5828,-118.4132\"/>\n",
       "</g>\n",
       "<!-- (&#39;Input&#39;, &#39;x2&#39;) -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>(&#39;Input&#39;, &#39;x2&#39;)</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"472.0827\" cy=\"-162\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"472.0827\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">x2</text>\n",
       "</g>\n",
       "<!-- (&#39;Mean&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>(&#39;Mean&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"71.0827\" cy=\"-18\" rx=\"71.1655\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"71.0827\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Mean(axis=time)</text>\n",
       "</g>\n",
       "<!-- (&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Mean&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Mean&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M374.2593,-84.4687C329.0205,-74.7634 232.5005,-53.9877 151.0827,-36 145.6961,-34.8099 140.1072,-33.5677 134.5008,-32.3164\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"134.9529,-28.8311 124.43,-30.0636 133.4247,-35.6623 134.9529,-28.8311\"/>\n",
       "</g>\n",
       "<!-- (&#39;Median&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>(&#39;Median&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"238.0827\" cy=\"-18\" rx=\"77.9229\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"238.0827\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Median(axis=time)</text>\n",
       "</g>\n",
       "<!-- (&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Median&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Median&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M377.5573,-79.9887C353.2902,-69.2033 314.0296,-51.7542 283.3358,-38.1125\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"284.6708,-34.8758 274.1112,-34.0127 281.8278,-41.2724 284.6708,-34.8758\"/>\n",
       "</g>\n",
       "<!-- (&#39;Min&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>(&#39;Min&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"400.0827\" cy=\"-18\" rx=\"65.8793\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"400.0827\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Min(axis=time)</text>\n",
       "</g>\n",
       "<!-- (&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Min&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Min&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M400.0827,-71.8314C400.0827,-64.131 400.0827,-54.9743 400.0827,-46.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"403.5828,-46.4132 400.0827,-36.4133 396.5828,-46.4133 403.5828,-46.4132\"/>\n",
       "</g>\n",
       "<!-- (&#39;Max&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>(&#39;Max&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"551.0827\" cy=\"-18\" rx=\"67.3155\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"551.0827\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Max(axis=time)</text>\n",
       "</g>\n",
       "<!-- (&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Max&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Max&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M422.3633,-79.3762C445.0646,-68.5517 480.8267,-51.4995 508.9007,-38.1133\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"510.5767,-41.1917 518.0967,-33.7284 507.5639,-34.8732 510.5767,-41.1917\"/>\n",
       "</g>\n",
       "<!-- (&#39;Sum&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>(&#39;Sum&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"703.0827\" cy=\"-18\" rx=\"67.3328\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"703.0827\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Sum(axis=time)</text>\n",
       "</g>\n",
       "<!-- (&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Sum&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),)) -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>(&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),))&#45;&gt;(&#39;Sum&#39;, (&#39;time&#39;,), ((&#39;Diff&#39;, (None,), ((&#39;Input&#39;, &#39;x1&#39;),)),))</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M425.6552,-83.9234C473.2208,-72.6207 576.4683,-48.0866 642.7167,-32.3444\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"643.6942,-35.7097 652.6141,-29.9925 642.0758,-28.8993 643.6942,-35.7097\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<tsfuse.computation.graph.Graph at 0x7fc7bb4ee5b0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To apply this computation graph, simply call :func:`~tsfuse.computation.Graph.transform` with a time series dictionary `X` as input:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-09T11:55:30.829811Z",
     "start_time": "2019-12-09T11:55:30.799057Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Max(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Mean(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Median(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Min(Diff(Input(x1)), axis=time)</th>\n",
       "      <th>Sum(Diff(Input(x1)), axis=time)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Max(Diff(Input(x1)), axis=time)  Mean(Diff(Input(x1)), axis=time)  \\\n",
       "0                              1.0                               1.0   \n",
       "1                              1.0                               1.0   \n",
       "2                             -1.0                              -1.0   \n",
       "3                             -1.0                              -1.0   \n",
       "\n",
       "   Median(Diff(Input(x1)), axis=time)  Min(Diff(Input(x1)), axis=time)  \\\n",
       "0                                 1.0                              1.0   \n",
       "1                                 1.0                              1.0   \n",
       "2                                -1.0                             -1.0   \n",
       "3                                -1.0                             -1.0   \n",
       "\n",
       "   Sum(Diff(Input(x1)), axis=time)  \n",
       "0                              2.0  \n",
       "1                              2.0  \n",
       "2                             -2.0  \n",
       "3                             -2.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.transform(X)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python [conda env:tsfuse]",
   "language": "python",
   "name": "conda-env-tsfuse-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "288px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
